use image::Rgb;
use std::collections::HashMap;

pub fn get_minecraft_colours() -> Vec<Rgb<u8>> {
    vec![
        Rgb([127, 178, 56]),
        Rgb([109, 153, 48]),
        Rgb([89, 125, 39]),
        Rgb([247, 233, 163]),
        Rgb([213, 201, 140]),
        Rgb([174, 164, 115]),
        Rgb([199, 199, 199]),
        Rgb([171, 171, 171]),
        Rgb([140, 140, 140]),
        Rgb([255, 0, 0]),
        Rgb([220, 0, 0]),
        Rgb([180, 0, 0]),
        Rgb([160, 160, 255]),
        Rgb([138, 138, 220]),
        Rgb([112, 112, 180]),
        Rgb([167, 167, 167]),
        Rgb([144, 144, 144]),
        Rgb([117, 117, 117]),
        Rgb([0, 124, 0]),
        Rgb([0, 106, 0]),
        Rgb([0, 87, 0]),
        Rgb([255, 255, 255]),
        Rgb([220, 220, 220]),
        Rgb([180, 180, 180]),
        Rgb([164, 168, 184]),
        Rgb([141, 144, 158]),
        Rgb([115, 118, 129]),
        Rgb([151, 109, 77]),
        Rgb([130, 94, 66]),
        Rgb([106, 76, 54]),
        Rgb([112, 112, 112]),
        Rgb([96, 96, 96]),
        Rgb([79, 79, 79]),
        Rgb([64, 64, 255]),
        Rgb([55, 55, 220]),
        Rgb([45, 45, 180]),
        Rgb([143, 119, 72]),
        Rgb([123, 102, 62]),
        Rgb([100, 84, 50]),
        Rgb([255, 252, 245]),
        Rgb([220, 217, 211]),
        Rgb([180, 177, 172]),
        Rgb([216, 127, 51]),
        Rgb([186, 109, 44]),
        Rgb([152, 89, 36]),
        Rgb([178, 76, 216]),
        Rgb([153, 65, 186]),
        Rgb([125, 53, 152]),
        Rgb([102, 153, 216]),
        Rgb([88, 132, 186]),
        Rgb([72, 108, 152]),
        Rgb([229, 229, 51]),
        Rgb([197, 197, 44]),
        Rgb([161, 161, 36]),
        Rgb([127, 204, 25]),
        Rgb([109, 176, 21]),
        Rgb([89, 144, 17]),
        Rgb([242, 127, 165]),
        Rgb([208, 109, 142]),
        Rgb([170, 89, 116]),
        Rgb([76, 76, 76]),
        Rgb([65, 65, 65]),
        Rgb([53, 53, 53]),
        Rgb([153, 153, 153]),
        Rgb([132, 132, 132]),
        Rgb([108, 108, 108]),
        Rgb([76, 127, 153]),
        Rgb([65, 109, 132]),
        Rgb([53, 89, 108]),
        Rgb([127, 63, 178]),
        Rgb([109, 54, 153]),
        Rgb([89, 44, 125]),
        Rgb([51, 76, 178]),
        Rgb([44, 65, 153]),
        Rgb([36, 53, 125]),
        Rgb([102, 76, 51]),
        Rgb([88, 65, 44]),
        Rgb([72, 53, 36]),
        Rgb([102, 127, 51]),
        Rgb([88, 109, 44]),
        Rgb([72, 89, 36]),
        Rgb([153, 51, 51]),
        Rgb([132, 44, 44]),
        Rgb([108, 36, 36]),
        Rgb([25, 25, 25]),
        Rgb([21, 21, 21]),
        Rgb([17, 17, 17]),
        Rgb([250, 238, 77]),
        Rgb([215, 205, 66]),
        Rgb([176, 168, 54]),
        Rgb([92, 219, 213]),
        Rgb([79, 188, 183]),
        Rgb([64, 154, 150]),
        Rgb([74, 128, 255]),
        Rgb([63, 110, 220]),
        Rgb([52, 90, 180]),
        Rgb([0, 217, 58]),
        Rgb([0, 187, 50]),
        Rgb([0, 153, 40]),
        Rgb([129, 86, 49]),
        Rgb([111, 74, 42]),
        Rgb([91, 60, 34]),
        Rgb([112, 2, 0]),
        Rgb([96, 1, 0]),
        Rgb([79, 1, 0]),
        Rgb([209, 177, 161]),
        Rgb([180, 152, 138]),
        Rgb([147, 124, 113]),
        Rgb([159, 82, 36]),
        Rgb([137, 70, 31]),
        Rgb([112, 57, 25]),
        Rgb([149, 87, 108]),
        Rgb([128, 75, 93]),
        Rgb([105, 61, 76]),
        Rgb([112, 108, 138]),
        Rgb([96, 93, 119]),
        Rgb([79, 76, 97]),
        Rgb([186, 133, 36]),
        Rgb([160, 114, 31]),
        Rgb([131, 93, 25]),
        Rgb([103, 117, 53]),
        Rgb([88, 100, 45]),
        Rgb([72, 82, 37]),
        Rgb([160, 77, 78]),
        Rgb([138, 66, 67]),
        Rgb([112, 54, 55]),
        Rgb([57, 41, 35]),
        Rgb([49, 35, 30]),
        Rgb([40, 28, 24]),
        Rgb([135, 107, 98]),
        Rgb([116, 92, 84]),
        Rgb([95, 75, 69]),
        Rgb([87, 92, 92]),
        Rgb([75, 79, 79]),
        Rgb([61, 64, 64]),
        Rgb([122, 73, 88]),
        Rgb([105, 62, 75]),
        Rgb([86, 51, 62]),
        Rgb([76, 62, 92]),
        Rgb([65, 53, 79]),
        Rgb([53, 43, 64]),
        Rgb([76, 50, 35]),
        Rgb([65, 43, 30]),
        Rgb([53, 35, 24]),
        Rgb([76, 82, 42]),
        Rgb([65, 70, 36]),
        Rgb([53, 57, 29]),
        Rgb([142, 60, 46]),
        Rgb([122, 51, 39]),
        Rgb([100, 42, 32]),
        Rgb([37, 22, 16]),
        Rgb([31, 18, 13]),
        Rgb([26, 15, 11]),
        Rgb([189, 48, 49]),
        Rgb([163, 41, 42]),
        Rgb([133, 33, 34]),
        Rgb([148, 63, 97]),
        Rgb([127, 54, 83]),
        Rgb([104, 44, 68]),
        Rgb([92, 25, 29]),
        Rgb([79, 21, 25]),
        Rgb([64, 17, 20]),
        Rgb([22, 126, 134]),
        Rgb([18, 108, 115]),
        Rgb([15, 88, 94]),
        Rgb([58, 142, 140]),
        Rgb([50, 122, 120]),
        Rgb([40, 100, 98]),
        Rgb([86, 44, 62]),
        Rgb([74, 37, 53]),
        Rgb([60, 31, 43]),
        Rgb([20, 180, 133]),
        Rgb([17, 155, 114]),
        Rgb([14, 127, 93]),
        Rgb([100, 100, 100]),
        Rgb([86, 86, 86]),
        Rgb([70, 70, 70]),
        Rgb([216, 175, 147]),
        Rgb([186, 150, 126]),
        Rgb([152, 123, 103]),
        Rgb([127, 167, 150]),
        Rgb([109, 144, 129]),
        Rgb([89, 117, 105]),
    ]
}

type MinecraftColourLookupTable = HashMap<Rgb<u8>, usize>;

pub fn build_colour_lookup_hashmap(colours: &Vec<Rgb<u8>>) -> HashMap<Rgb<u8>, usize> {
    let mut hash_map: HashMap<Rgb<u8>, usize> = HashMap::new();
    for (index, colour) in colours.iter().enumerate() {
        hash_map.insert(colour.clone(), index);
    }
    hash_map
}

pub fn get_colour_index_and_shade(
    colour: &Rgb<u8>,
    lookup_table: &MinecraftColourLookupTable,
) -> Option<(usize, ColourShade)> {
    let index = lookup_table.get(&colour);
    match index {
        Some(i) => match i % 3 {
            0 => Some((i / 3, ColourShade::Light)),
            1 => Some(((i - 1) / 3, ColourShade::Normal)),
            2 => Some(((i - 2) / 3, ColourShade::Dark)),
            _ => None,
        },
        None => None,
    }
}

pub enum ColourShade {
    Light,
    Normal,
    Dark,
}
